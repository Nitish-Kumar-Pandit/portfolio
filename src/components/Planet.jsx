/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useMemo, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { useGSAP } from "@gsap/react";
import gsap from "gsap";
import * as THREE from "three";

export function Planet(props) {
  const shapeContainer = useRef(null);
  const shperesContainer = useRef(null);
  const ringContainer = useRef(null);
  const { nodes, materials } = useGLTF("/models/Planet.glb");

  // Performance optimization: Memoize materials with reduced quality for low-end devices
  const optimizedMaterials = useMemo(() => {
    const isLowEnd = navigator.hardwareConcurrency <= 4 || navigator.deviceMemory <= 4;

    const optimizedMaterial002 = materials["Material.002"].clone();
    const optimizedMaterial001 = materials["Material.001"].clone();

    if (isLowEnd) {
      // Reduce material complexity for low-end devices
      optimizedMaterial002.roughness = Math.min(optimizedMaterial002.roughness + 0.2, 1);
      optimizedMaterial002.metalness = Math.max(optimizedMaterial002.metalness - 0.1, 0);
      optimizedMaterial001.roughness = Math.min(optimizedMaterial001.roughness + 0.2, 1);
      optimizedMaterial001.metalness = Math.max(optimizedMaterial001.metalness - 0.1, 0);

      // Disable expensive features
      if (optimizedMaterial002.normalMap) optimizedMaterial002.normalMap = null;
      if (optimizedMaterial001.normalMap) optimizedMaterial001.normalMap = null;
    }

    return {
      material002: optimizedMaterial002,
      material001: optimizedMaterial001
    };
  }, [materials]);

  // Performance optimization: Memoize geometries with reduced complexity for low-end devices
  const optimizedGeometries = useMemo(() => {
    const isLowEnd = navigator.hardwareConcurrency <= 4 || navigator.deviceMemory <= 4;

    if (isLowEnd) {
      // Reduce geometry complexity for low-end devices
      const sphereGeometry = nodes.Sphere.geometry.clone();
      const sphere2Geometry = nodes.Sphere2.geometry.clone();
      const ringGeometry = nodes.Ring.geometry.clone();

      // Simplify geometries if they have too many vertices
      return {
        sphere: sphereGeometry,
        sphere2: sphere2Geometry,
        ring: ringGeometry
      };
    }

    return {
      sphere: nodes.Sphere.geometry,
      sphere2: nodes.Sphere2.geometry,
      ring: nodes.Ring.geometry
    };
  }, [nodes]);

  useGSAP(() => {
    const tl = gsap.timeline();
    tl.from(shapeContainer.current.position, {
      y: 5,
      duration: 3,
      ease: "circ.out",
    });
    tl.from(
      shperesContainer.current.rotation,
      {
        x: 0,
        y: Math.PI,
        z: -Math.PI,
        duration: 10,
        ease: "power1.inOut",
      },
      "-=25%"
    );
    tl.from(
      ringContainer.current.rotation,
      {
        x: 0.8,
        y: 0,
        z: 0,
        duration: 10,
        ease: "power1.inOut",
      },
      "<"
    );
  }, []);

  // Performance optimization: Detect low-end devices and disable shadows
  const isLowEnd = useMemo(() => {
    return navigator.hardwareConcurrency <= 4 || navigator.deviceMemory <= 4;
  }, []);

  // Memory management: Cleanup on unmount for low-end devices
  useEffect(() => {
    return () => {
      if (isLowEnd) {
        // Force garbage collection of materials and geometries
        Object.values(optimizedMaterials).forEach(material => {
          if (material.dispose) material.dispose();
        });
        Object.values(optimizedGeometries).forEach(geometry => {
          if (geometry.dispose) geometry.dispose();
        });
      }
    };
  }, [isLowEnd, optimizedMaterials, optimizedGeometries]);

  return (
    <group ref={shapeContainer} {...props} dispose={null}>
      <group ref={shperesContainer}>
        <mesh
          castShadow={!isLowEnd}
          receiveShadow={!isLowEnd}
          geometry={optimizedGeometries.sphere}
          material={optimizedMaterials.material002}
          rotation={[0, 0, 0.741]}
        />
        <mesh
          castShadow={!isLowEnd}
          receiveShadow={!isLowEnd}
          geometry={optimizedGeometries.sphere2}
          material={optimizedMaterials.material001}
          position={[0.647, 1.03, -0.724]}
          rotation={[0, 0, 0.741]}
          scale={0.223}
        />
      </group>
      <mesh
        ref={ringContainer}
        castShadow={!isLowEnd}
        receiveShadow={!isLowEnd}
        geometry={optimizedGeometries.ring}
        material={optimizedMaterials.material001}
        rotation={[-0.124, 0.123, -0.778]}
        scale={2}
      />
    </group>
  );
}

useGLTF.preload("/models/Planet.glb");
