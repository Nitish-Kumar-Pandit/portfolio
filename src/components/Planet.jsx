/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useMemo, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { useGSAP } from "@gsap/react";
import gsap from "gsap";

export function Planet(props) {
  console.log('🌍 Planet component rendering...', props);

  const shapeContainer = useRef(null);
  const shperesContainer = useRef(null);
  const ringContainer = useRef(null);

  // Load GLTF model
  const { nodes, materials } = useGLTF("/models/Planet.glb");

  // Debug logging
  useEffect(() => {
    console.log('✅ Planet component mounted');
    console.log('📦 Nodes:', nodes);
    console.log('🎨 Materials:', materials);
    console.log('🔧 Props:', props);
  }, [nodes, materials, props]);

  // Simple material optimization
  const optimizedMaterials = useMemo(() => {
    if (!materials["Material.002"] || !materials["Material.001"]) return null;

    const optimizedMaterial002 = materials["Material.002"].clone();
    const optimizedMaterial001 = materials["Material.001"].clone();

    return {
      material002: optimizedMaterial002,
      material001: optimizedMaterial001
    };
  }, [materials]);

  // Simple geometry optimization
  const optimizedGeometries = useMemo(() => {
    if (!nodes.Sphere || !nodes.Sphere2 || !nodes.Ring) return null;

    return {
      sphere: nodes.Sphere.geometry,
      sphere2: nodes.Sphere2.geometry,
      ring: nodes.Ring.geometry
    };
  }, [nodes]);

  useGSAP(() => {
    const tl = gsap.timeline();
    tl.from(shapeContainer.current.position, {
      y: 5,
      duration: 3,
      ease: "circ.out",
    });
    tl.from(
      shperesContainer.current.rotation,
      {
        x: 0,
        y: Math.PI,
        z: -Math.PI,
        duration: 10,
        ease: "power1.inOut",
      },
      "-=25%"
    );
    tl.from(
      ringContainer.current.rotation,
      {
        x: 0.8,
        y: 0,
        z: 0,
        duration: 10,
        ease: "power1.inOut",
      },
      "<"
    );
  }, []);

  // Simple error handling
  if (!nodes || !materials) {
    console.warn('Planet: Missing nodes or materials');
    // Always render a fallback sphere so something is visible
    return (
      <group ref={shapeContainer} {...props}>
        <mesh>
          <sphereGeometry args={[1, 32, 32]} />
          <meshStandardMaterial color="#4a90e2" roughness={0.3} metalness={0.7} />
        </mesh>
        <mesh position={[0.5, 0.8, -0.5]} scale={0.2}>
          <sphereGeometry args={[1, 16, 12]} />
          <meshStandardMaterial color="#6bb6ff" />
        </mesh>
      </group>
    );
  }

  if (!optimizedMaterials || !optimizedGeometries) {
    console.warn('Planet: Optimized materials/geometries not ready');
    // Return a simple fallback sphere while loading
    return (
      <group ref={shapeContainer} {...props}>
        <mesh>
          <sphereGeometry args={[1, 32, 32]} />
          <meshStandardMaterial color="#4a90e2" roughness={0.3} metalness={0.7} />
        </mesh>
      </group>
    );
  }

  return (
    <group ref={shapeContainer} {...props} dispose={null}>
      <group ref={shperesContainer}>
        <mesh
          castShadow
          receiveShadow
          geometry={optimizedGeometries.sphere}
          material={optimizedMaterials.material002}
          rotation={[0, 0, 0.741]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={optimizedGeometries.sphere2}
          material={optimizedMaterials.material001}
          position={[0.647, 1.03, -0.724]}
          rotation={[0, 0, 0.741]}
          scale={0.223}
        />
      </group>
      <mesh
        ref={ringContainer}
        castShadow
        receiveShadow
        geometry={optimizedGeometries.ring}
        material={optimizedMaterials.material001}
        rotation={[-0.124, 0.123, -0.778]}
        scale={2}
      />
    </group>
  );
}

useGLTF.preload("/models/Planet.glb");
